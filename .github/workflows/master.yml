name: master

on:
  push:
    branches:
      - master

env:
  BASEIMAGE: docker.pkg.github.com/${{ github.repository }}/kafka-schema-backup

jobs:
  build:
    name: Build and push Docker container
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/cache@v1
        name: Cache Gradle wrapper
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlew-${{ hashFiles('**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradlew-
      - uses: actions/cache@v1
        name: Cache dependencies
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: |
              ${{ runner.os }}-gradle-
      - uses: actions/setup-java@v1
        with:
          java-version: '14.x'
      - name: test and build
        env:
          TESTCONTAINERS_RYUK_DISABLED: true
        run: ./gradlew test build
      - name: Lag tag for image
        run: echo "TAG=$(date +%Y%m%d%H%M%S)-$(git describe --always --dirty --exclude '*')" >> ${GITHUB_ENV}
      - name: Lag full image referanse
        id: declare
        run: |
          echo "IMAGE=${BASEIMAGE}:${TAG}" >> ${GITHUB_ENV}
          echo "::set-output name=image::${BASEIMAGE}:${TAG}"
      - name: Build docker image
        run: docker build -t ${IMAGE} .
      - name: Login to Github Package Registry
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} -p ${GITHUB_TOKEN}
      - name: Push Docker image
        run: docker push ${IMAGE}
    outputs:
      image: "${{ steps.declare.outputs.image }}"
  deploy-dev-gcp:
    name: Deploy to dev-gcp
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-gcp
          RESOURCE: nais/nais.yml
          VAR: image=${{ needs.build.outputs.image }},ktor_env="dev"
